apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-exporter-script
  namespace: op-stack
data:
  exporter.py: |
    import requests
    import time
    from prometheus_client import start_http_server, Gauge, Counter
    
    # Metrics
    block_height = Gauge('blockchain_block_height', 'Current block height', ['chain'])
    rpc_requests = Counter('blockchain_rpc_requests_total', 'Total RPC requests', ['chain', 'status'])
    
    def get_block_height(endpoint, chain):
        try:
            payload = {"jsonrpc": "2.0", "method": "eth_blockNumber", "params": [], "id": 1}
            response = requests.post(endpoint, json=payload, timeout=5)
            
            if response.status_code == 200:
                result = response.json()
                if 'result' in result:
                    height = int(result['result'], 16)
                    rpc_requests.labels(chain=chain, status='success').inc()
                    return height
            
            rpc_requests.labels(chain=chain, status='error').inc()
            return None
        except Exception as e:
            print(f"Error for {chain}: {e}")
            rpc_requests.labels(chain=chain, status='error').inc()
            return None
    
    def main():
        start_http_server(8080)
        print("Blockchain metrics exporter started on port 8080")
        
        endpoints = {
            'l1-ethereum': 'http://l1-ethereum-service:8545',
            'l2-opstack': 'http://l2-opstack-service:8545'
        }
        
        while True:
            for chain, endpoint in endpoints.items():
                height = get_block_height(endpoint, chain)
                if height is not None:
                    block_height.labels(chain=chain).set(height)
                    print(f"{chain}: block {height}")
                else:
                    print(f"{chain}: failed to get block height")
            time.sleep(10)
    
    if __name__ == '__main__':
        main()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-exporter
  namespace: op-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blockchain-exporter
  template:
    metadata:
      labels:
        app: blockchain-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: blockchain-exporter
        image: python:3.9-slim
        ports:
        - containerPort: 8080
        command: ["sh", "-c"]
        args:
        - |
          pip install requests prometheus_client &&
          python /scripts/exporter.py
        volumeMounts:
        - name: script
          mountPath: /scripts
      volumes:
      - name: script
        configMap:
          name: blockchain-exporter-script
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-exporter-service
  namespace: op-stack
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  selector:
    app: blockchain-exporter
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
