apiVersion: v1
kind: ConfigMap
metadata:
  name: blockchain-metrics-script
  namespace: op-stack
data:
  metrics.py: |
    import requests
    import time
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import threading
    import json

    l1_block_height = 0
    l2_block_height = 0
    
    def get_block_height(endpoint, chain):
        global l1_block_height, l2_block_height
        try:
            payload = {"jsonrpc": "2.0", "method": "eth_blockNumber", "params": [], "id": 1}
            response = requests.post(endpoint, json=payload, timeout=5)
            if response.status_code == 200:
                result = response.json()
                if 'result' in result:
                    height = int(result['result'], 16)
                    if chain == 'l1':
                        l1_block_height = height
                    else:
                        l2_block_height = height
                    print(f"{chain.upper()}: Block {height}")
                    return height
        except Exception as e:
            print(f"Error getting {chain} block height: {e}")
        return 0

    class MetricsHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/metrics':
                metrics = f"""# HELP blockchain_block_height Current blockchain block height
    # TYPE blockchain_block_height gauge
    blockchain_block_height{{chain="l1-ethereum"}} {l1_block_height}
    blockchain_block_height{{chain="l2-opstack"}} {l2_block_height}
    """
                self.send_response(200)
                self.send_header('Content-Type', 'text/plain')
                self.end_headers()
                self.wfile.write(metrics.encode())
            else:
                self.send_response(404)
                self.end_headers()

    def collect_metrics():
        while True:
            get_block_height('http://l1-ethereum-service:8545', 'l1')
            get_block_height('http://l2-opstack-service:8545', 'l2')
            time.sleep(10)

    def start_server():
        server = HTTPServer(('0.0.0.0', 8888), MetricsHandler)
        server.serve_forever()

    if __name__ == '__main__':
        print("Starting blockchain metrics exporter on port 8888")
        metrics_thread = threading.Thread(target=collect_metrics)
        metrics_thread.daemon = True
        metrics_thread.start()
        start_server()
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-metrics
  namespace: op-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blockchain-metrics
  template:
    metadata:
      labels:
        app: blockchain-metrics
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: metrics
        image: python:3.9-slim
        ports:
        - containerPort: 8888
        command: ["sh", "-c"]
        args:
        - |
          pip install requests &&
          python /scripts/metrics.py
        volumeMounts:
        - name: script
          mountPath: /scripts
      volumes:
      - name: script
        configMap:
          name: blockchain-metrics-script
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-metrics-service
  namespace: op-stack
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8888"
spec:
  selector:
    app: blockchain-metrics
  ports:
  - name: metrics
    port: 8888
    targetPort: 8888
